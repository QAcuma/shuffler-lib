/*
 * This file is generated by jOOQ.
 */
package ru.acuma.k.shuffler.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.acuma.k.shuffler.tables.Team;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamRecord extends UpdatableRecordImpl<TeamRecord> implements Record3<Long, Long, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.team.id</code>.
     */
    public TeamRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.team.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.team.game_id</code>.
     */
    public TeamRecord setGameId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.team.game_id</code>.
     */
    public Long getGameId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.team.is_winner</code>.
     */
    public TeamRecord setIsWinner(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.team.is_winner</code>.
     */
    public Boolean getIsWinner() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Team.TEAM.ID;
    }

    @Override
    public Field<Long> field2() {
        return Team.TEAM.GAME_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return Team.TEAM.IS_WINNER;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getGameId();
    }

    @Override
    public Boolean component3() {
        return getIsWinner();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getGameId();
    }

    @Override
    public Boolean value3() {
        return getIsWinner();
    }

    @Override
    public TeamRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TeamRecord value2(Long value) {
        setGameId(value);
        return this;
    }

    @Override
    public TeamRecord value3(Boolean value) {
        setIsWinner(value);
        return this;
    }

    @Override
    public TeamRecord values(Long value1, Long value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TeamRecord
     */
    public TeamRecord() {
        super(Team.TEAM);
    }

    /**
     * Create a detached, initialised TeamRecord
     */
    public TeamRecord(Long id, Long gameId, Boolean isWinner) {
        super(Team.TEAM);

        setId(id);
        setGameId(gameId);
        setIsWinner(isWinner);
    }

    /**
     * Create a detached, initialised TeamRecord
     */
    public TeamRecord(ru.acuma.k.shuffler.tables.pojos.Team value) {
        super(Team.TEAM);

        if (value != null) {
            setId(value.getId());
            setGameId(value.getGameId());
            setIsWinner(value.getIsWinner());
        }
    }
}
