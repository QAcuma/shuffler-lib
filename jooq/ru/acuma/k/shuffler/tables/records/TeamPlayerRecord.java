/*
 * This file is generated by jOOQ.
 */
package ru.acuma.k.shuffler.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.acuma.k.shuffler.tables.TeamPlayer;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamPlayerRecord extends UpdatableRecordImpl<TeamPlayerRecord> implements Record3<Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.team_player.id</code>.
     */
    public TeamPlayerRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.team_player.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.team_player.player_id</code>.
     */
    public TeamPlayerRecord setPlayerId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.team_player.player_id</code>.
     */
    public Long getPlayerId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.team_player.team_id</code>.
     */
    public TeamPlayerRecord setTeamId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.team_player.team_id</code>.
     */
    public Long getTeamId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TeamPlayer.TEAM_PLAYER.ID;
    }

    @Override
    public Field<Long> field2() {
        return TeamPlayer.TEAM_PLAYER.PLAYER_ID;
    }

    @Override
    public Field<Long> field3() {
        return TeamPlayer.TEAM_PLAYER.TEAM_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getPlayerId();
    }

    @Override
    public Long component3() {
        return getTeamId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getPlayerId();
    }

    @Override
    public Long value3() {
        return getTeamId();
    }

    @Override
    public TeamPlayerRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TeamPlayerRecord value2(Long value) {
        setPlayerId(value);
        return this;
    }

    @Override
    public TeamPlayerRecord value3(Long value) {
        setTeamId(value);
        return this;
    }

    @Override
    public TeamPlayerRecord values(Long value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TeamPlayerRecord
     */
    public TeamPlayerRecord() {
        super(TeamPlayer.TEAM_PLAYER);
    }

    /**
     * Create a detached, initialised TeamPlayerRecord
     */
    public TeamPlayerRecord(Long id, Long playerId, Long teamId) {
        super(TeamPlayer.TEAM_PLAYER);

        setId(id);
        setPlayerId(playerId);
        setTeamId(teamId);
    }

    /**
     * Create a detached, initialised TeamPlayerRecord
     */
    public TeamPlayerRecord(ru.acuma.k.shuffler.tables.pojos.TeamPlayer value) {
        super(TeamPlayer.TEAM_PLAYER);

        if (value != null) {
            setId(value.getId());
            setPlayerId(value.getPlayerId());
            setTeamId(value.getTeamId());
        }
    }
}
