/*
 * This file is generated by jOOQ.
 */
package ru.acuma.shuffler.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.acuma.shuffler.tables.GroupInfo;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupInfoRecord extends UpdatableRecordImpl<GroupInfoRecord> implements Record3<Long, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.group_info.chat_id</code>.
     */
    public GroupInfoRecord setChatId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.group_info.chat_id</code>.
     */
    public Long getChatId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.group_info.title</code>.
     */
    public GroupInfoRecord setTitle(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.group_info.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.group_info.is_blocked</code>.
     */
    public GroupInfoRecord setIsBlocked(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.group_info.is_blocked</code>.
     */
    public Boolean getIsBlocked() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return GroupInfo.GROUP_INFO.CHAT_ID;
    }

    @Override
    public Field<String> field2() {
        return GroupInfo.GROUP_INFO.TITLE;
    }

    @Override
    public Field<Boolean> field3() {
        return GroupInfo.GROUP_INFO.IS_BLOCKED;
    }

    @Override
    public Long component1() {
        return getChatId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public Boolean component3() {
        return getIsBlocked();
    }

    @Override
    public Long value1() {
        return getChatId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public Boolean value3() {
        return getIsBlocked();
    }

    @Override
    public GroupInfoRecord value1(Long value) {
        setChatId(value);
        return this;
    }

    @Override
    public GroupInfoRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public GroupInfoRecord value3(Boolean value) {
        setIsBlocked(value);
        return this;
    }

    @Override
    public GroupInfoRecord values(Long value1, String value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GroupInfoRecord
     */
    public GroupInfoRecord() {
        super(GroupInfo.GROUP_INFO);
    }

    /**
     * Create a detached, initialised GroupInfoRecord
     */
    public GroupInfoRecord(Long chatId, String title, Boolean isBlocked) {
        super(GroupInfo.GROUP_INFO);

        setChatId(chatId);
        setTitle(title);
        setIsBlocked(isBlocked);
    }

    /**
     * Create a detached, initialised GroupInfoRecord
     */
    public GroupInfoRecord(ru.acuma.shuffler.tables.pojos.GroupInfo value) {
        super(GroupInfo.GROUP_INFO);

        if (value != null) {
            setChatId(value.getChatId());
            setTitle(value.getTitle());
            setIsBlocked(value.getIsBlocked());
        }
    }
}
