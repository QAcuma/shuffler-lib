/*
 * This file is generated by jOOQ.
 */
package ru.acuma.shuffler.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.acuma.shuffler.Keys;
import ru.acuma.shuffler.Public;
import ru.acuma.shuffler.tables.records.GroupInfoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupInfo extends TableImpl<GroupInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.group_info</code>
     */
    public static final GroupInfo GROUP_INFO = new GroupInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupInfoRecord> getRecordType() {
        return GroupInfoRecord.class;
    }

    /**
     * The column <code>public.group_info.id</code>.
     */
    public final TableField<GroupInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.group_info.title</code>.
     */
    public final TableField<GroupInfoRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.group_info.is_active</code>.
     */
    public final TableField<GroupInfoRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.group_info.name</code>.
     */
    public final TableField<GroupInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>public.group_info.telegram_name</code>.
     */
    public final TableField<GroupInfoRecord, String> TELEGRAM_NAME = createField(DSL.name("telegram_name"), SQLDataType.CLOB, this, "");

    private GroupInfo(Name alias, Table<GroupInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private GroupInfo(Name alias, Table<GroupInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.group_info</code> table reference
     */
    public GroupInfo(String alias) {
        this(DSL.name(alias), GROUP_INFO);
    }

    /**
     * Create an aliased <code>public.group_info</code> table reference
     */
    public GroupInfo(Name alias) {
        this(alias, GROUP_INFO);
    }

    /**
     * Create a <code>public.group_info</code> table reference
     */
    public GroupInfo() {
        this(DSL.name("group_info"), null);
    }

    public <O extends Record> GroupInfo(Table<O> child, ForeignKey<O, GroupInfoRecord> key) {
        super(child, key, GROUP_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<GroupInfoRecord> getPrimaryKey() {
        return Keys.GROUP_INFO_PKEY;
    }

    @Override
    public List<UniqueKey<GroupInfoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_NAME);
    }

    @Override
    public GroupInfo as(String alias) {
        return new GroupInfo(DSL.name(alias), this);
    }

    @Override
    public GroupInfo as(Name alias) {
        return new GroupInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupInfo rename(String name) {
        return new GroupInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupInfo rename(Name name) {
        return new GroupInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Boolean, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
