/*
 * This file is generated by jOOQ.
 */
package ru.acuma.shuffler.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import ru.acuma.shuffler.tables.Event;
import ru.acuma.shuffler.tables.records.EventRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class EventDao extends DAOImpl<EventRecord, ru.acuma.shuffler.tables.pojos.Event, Long> {

    /**
     * Create a new EventDao without any configuration
     */
    public EventDao() {
        super(Event.EVENT, ru.acuma.shuffler.tables.pojos.Event.class);
    }

    /**
     * Create a new EventDao with an attached configuration
     */
    @Autowired
    public EventDao(Configuration configuration) {
        super(Event.EVENT, ru.acuma.shuffler.tables.pojos.Event.class, configuration);
    }

    @Override
    public Long getId(ru.acuma.shuffler.tables.pojos.Event object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Event.EVENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchById(Long... values) {
        return fetch(Event.EVENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ru.acuma.shuffler.tables.pojos.Event fetchOneById(Long value) {
        return fetchOne(Event.EVENT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ru.acuma.shuffler.tables.pojos.Event> fetchOptionalById(Long value) {
        return fetchOptional(Event.EVENT.ID, value);
    }

    /**
     * Fetch records that have <code>chat_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchRangeOfChatId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Event.EVENT.CHAT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>chat_id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchByChatId(Long... values) {
        return fetch(Event.EVENT.CHAT_ID, values);
    }

    /**
     * Fetch records that have <code>season_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchRangeOfSeasonId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Event.EVENT.SEASON_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>season_id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchBySeasonId(Long... values) {
        return fetch(Event.EVENT.SEASON_ID, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(Event.EVENT.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchByState(String... values) {
        return fetch(Event.EVENT.STATE, values);
    }

    /**
     * Fetch records that have <code>discipline BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchRangeOfDiscipline(String lowerInclusive, String upperInclusive) {
        return fetchRange(Event.EVENT.DISCIPLINE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>discipline IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchByDiscipline(String... values) {
        return fetch(Event.EVENT.DISCIPLINE, values);
    }

    /**
     * Fetch records that have <code>started_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchRangeOfStartedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Event.EVENT.STARTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>started_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchByStartedAt(OffsetDateTime... values) {
        return fetch(Event.EVENT.STARTED_AT, values);
    }

    /**
     * Fetch records that have <code>finished_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchRangeOfFinishedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Event.EVENT.FINISHED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>finished_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Event> fetchByFinishedAt(OffsetDateTime... values) {
        return fetch(Event.EVENT.FINISHED_AT, values);
    }
}
