/*
 * This file is generated by jOOQ.
 */
package ru.acuma.shuffler.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import ru.acuma.shuffler.tables.Season;
import ru.acuma.shuffler.tables.records.SeasonRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class SeasonDao extends DAOImpl<SeasonRecord, ru.acuma.shuffler.tables.pojos.Season, Long> {

    /**
     * Create a new SeasonDao without any configuration
     */
    public SeasonDao() {
        super(Season.SEASON, ru.acuma.shuffler.tables.pojos.Season.class);
    }

    /**
     * Create a new SeasonDao with an attached configuration
     */
    @Autowired
    public SeasonDao(Configuration configuration) {
        super(Season.SEASON, ru.acuma.shuffler.tables.pojos.Season.class, configuration);
    }

    @Override
    public Long getId(ru.acuma.shuffler.tables.pojos.Season object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Season> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Season.SEASON.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Season> fetchById(Long... values) {
        return fetch(Season.SEASON.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ru.acuma.shuffler.tables.pojos.Season fetchOneById(Long value) {
        return fetchOne(Season.SEASON.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ru.acuma.shuffler.tables.pojos.Season> fetchOptionalById(Long value) {
        return fetchOptional(Season.SEASON.ID, value);
    }

    /**
     * Fetch records that have <code>started_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Season> fetchRangeOfStartedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Season.SEASON.STARTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>started_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Season> fetchByStartedAt(OffsetDateTime... values) {
        return fetch(Season.SEASON.STARTED_AT, values);
    }

    /**
     * Fetch records that have <code>finished_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Season> fetchRangeOfFinishedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Season.SEASON.FINISHED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>finished_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Season> fetchByFinishedAt(OffsetDateTime... values) {
        return fetch(Season.SEASON.FINISHED_AT, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Season> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Season.SEASON.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Season> fetchByName(String... values) {
        return fetch(Season.SEASON.NAME, values);
    }
}
