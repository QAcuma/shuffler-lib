/*
 * This file is generated by jOOQ.
 */
package ru.acuma.shuffler.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import ru.acuma.shuffler.tables.GroupInfo;
import ru.acuma.shuffler.tables.records.GroupInfoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class GroupInfoDao extends DAOImpl<GroupInfoRecord, ru.acuma.shuffler.tables.pojos.GroupInfo, Long> {

    /**
     * Create a new GroupInfoDao without any configuration
     */
    public GroupInfoDao() {
        super(GroupInfo.GROUP_INFO, ru.acuma.shuffler.tables.pojos.GroupInfo.class);
    }

    /**
     * Create a new GroupInfoDao with an attached configuration
     */
    @Autowired
    public GroupInfoDao(Configuration configuration) {
        super(GroupInfo.GROUP_INFO, ru.acuma.shuffler.tables.pojos.GroupInfo.class, configuration);
    }

    @Override
    public Long getId(ru.acuma.shuffler.tables.pojos.GroupInfo object) {
        return object.getChatId();
    }

    /**
     * Fetch records that have <code>chat_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchRangeOfChatId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(GroupInfo.GROUP_INFO.CHAT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>chat_id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchByChatId(Long... values) {
        return fetch(GroupInfo.GROUP_INFO.CHAT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>chat_id = value</code>
     */
    public ru.acuma.shuffler.tables.pojos.GroupInfo fetchOneByChatId(Long value) {
        return fetchOne(GroupInfo.GROUP_INFO.CHAT_ID, value);
    }

    /**
     * Fetch a unique record that has <code>chat_id = value</code>
     */
    public Optional<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchOptionalByChatId(Long value) {
        return fetchOptional(GroupInfo.GROUP_INFO.CHAT_ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(GroupInfo.GROUP_INFO.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchByTitle(String... values) {
        return fetch(GroupInfo.GROUP_INFO.TITLE, values);
    }

    /**
     * Fetch records that have <code>is_blocked BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchRangeOfIsBlocked(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(GroupInfo.GROUP_INFO.IS_BLOCKED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_blocked IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchByIsBlocked(Boolean... values) {
        return fetch(GroupInfo.GROUP_INFO.IS_BLOCKED, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(GroupInfo.GROUP_INFO.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchByName(String... values) {
        return fetch(GroupInfo.GROUP_INFO.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public ru.acuma.shuffler.tables.pojos.GroupInfo fetchOneByName(String value) {
        return fetchOne(GroupInfo.GROUP_INFO.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<ru.acuma.shuffler.tables.pojos.GroupInfo> fetchOptionalByName(String value) {
        return fetchOptional(GroupInfo.GROUP_INFO.NAME, value);
    }
}
