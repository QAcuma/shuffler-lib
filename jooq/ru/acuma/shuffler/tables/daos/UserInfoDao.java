/*
 * This file is generated by jOOQ.
 */
package ru.acuma.shuffler.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import ru.acuma.shuffler.tables.UserInfo;
import ru.acuma.shuffler.tables.records.UserInfoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserInfoDao extends DAOImpl<UserInfoRecord, ru.acuma.shuffler.tables.pojos.UserInfo, Long> {

    /**
     * Create a new UserInfoDao without any configuration
     */
    public UserInfoDao() {
        super(UserInfo.USER_INFO, ru.acuma.shuffler.tables.pojos.UserInfo.class);
    }

    /**
     * Create a new UserInfoDao with an attached configuration
     */
    @Autowired
    public UserInfoDao(Configuration configuration) {
        super(UserInfo.USER_INFO, ru.acuma.shuffler.tables.pojos.UserInfo.class, configuration);
    }

    @Override
    public Long getId(ru.acuma.shuffler.tables.pojos.UserInfo object) {
        return object.getTelegramId();
    }

    /**
     * Fetch records that have <code>telegram_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfTelegramId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.TELEGRAM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>telegram_id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByTelegramId(Long... values) {
        return fetch(UserInfo.USER_INFO.TELEGRAM_ID, values);
    }

    /**
     * Fetch a unique record that has <code>telegram_id = value</code>
     */
    public ru.acuma.shuffler.tables.pojos.UserInfo fetchOneByTelegramId(Long value) {
        return fetchOne(UserInfo.USER_INFO.TELEGRAM_ID, value);
    }

    /**
     * Fetch a unique record that has <code>telegram_id = value</code>
     */
    public Optional<ru.acuma.shuffler.tables.pojos.UserInfo> fetchOptionalByTelegramId(Long value) {
        return fetchOptional(UserInfo.USER_INFO.TELEGRAM_ID, value);
    }

    /**
     * Fetch records that have <code>language_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfLanguageCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.LANGUAGE_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language_code IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByLanguageCode(String... values) {
        return fetch(UserInfo.USER_INFO.LANGUAGE_CODE, values);
    }

    /**
     * Fetch records that have <code>is_bot BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfIsBot(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.IS_BOT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_bot IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByIsBot(Boolean... values) {
        return fetch(UserInfo.USER_INFO.IS_BOT, values);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByFirstName(String... values) {
        return fetch(UserInfo.USER_INFO.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByLastName(String... values) {
        return fetch(UserInfo.USER_INFO.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByUserName(String... values) {
        return fetch(UserInfo.USER_INFO.USER_NAME, values);
    }

    /**
     * Fetch records that have <code>is_blocked BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfIsBlocked(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.IS_BLOCKED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_blocked IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByIsBlocked(Boolean... values) {
        return fetch(UserInfo.USER_INFO.IS_BLOCKED, values);
    }

    /**
     * Fetch records that have <code>last_message_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfLastMessageAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.LAST_MESSAGE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_message_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByLastMessageAt(OffsetDateTime... values) {
        return fetch(UserInfo.USER_INFO.LAST_MESSAGE_AT, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByCreatedAt(OffsetDateTime... values) {
        return fetch(UserInfo.USER_INFO.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByUpdatedAt(OffsetDateTime... values) {
        return fetch(UserInfo.USER_INFO.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfDeletedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.DELETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByDeletedAt(OffsetDateTime... values) {
        return fetch(UserInfo.USER_INFO.DELETED_AT, values);
    }

    /**
     * Fetch records that have <code>media_blob BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchRangeOfMediaBlob(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.MEDIA_BLOB, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>media_blob IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.UserInfo> fetchByMediaBlob(byte[]... values) {
        return fetch(UserInfo.USER_INFO.MEDIA_BLOB, values);
    }
}
