/*
 * This file is generated by jOOQ.
 */
package ru.acuma.shuffler.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import ru.acuma.shuffler.tables.Team;
import ru.acuma.shuffler.tables.records.TeamRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TeamDao extends DAOImpl<TeamRecord, ru.acuma.shuffler.tables.pojos.Team, Long> {

    /**
     * Create a new TeamDao without any configuration
     */
    public TeamDao() {
        super(Team.TEAM, ru.acuma.shuffler.tables.pojos.Team.class);
    }

    /**
     * Create a new TeamDao with an attached configuration
     */
    @Autowired
    public TeamDao(Configuration configuration) {
        super(Team.TEAM, ru.acuma.shuffler.tables.pojos.Team.class, configuration);
    }

    @Override
    public Long getId(ru.acuma.shuffler.tables.pojos.Team object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Team> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Team.TEAM.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Team> fetchById(Long... values) {
        return fetch(Team.TEAM.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ru.acuma.shuffler.tables.pojos.Team fetchOneById(Long value) {
        return fetchOne(Team.TEAM.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ru.acuma.shuffler.tables.pojos.Team> fetchOptionalById(Long value) {
        return fetchOptional(Team.TEAM.ID, value);
    }

    /**
     * Fetch records that have <code>game_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Team> fetchRangeOfGameId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Team.TEAM.GAME_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>game_id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Team> fetchByGameId(Long... values) {
        return fetch(Team.TEAM.GAME_ID, values);
    }

    /**
     * Fetch records that have <code>is_winner BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Team> fetchRangeOfIsWinner(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Team.TEAM.IS_WINNER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_winner IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Team> fetchByIsWinner(Boolean... values) {
        return fetch(Team.TEAM.IS_WINNER, values);
    }
}
