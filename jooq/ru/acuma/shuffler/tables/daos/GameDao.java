/*
 * This file is generated by jOOQ.
 */
package ru.acuma.shuffler.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import ru.acuma.shuffler.tables.Game;
import ru.acuma.shuffler.tables.records.GameRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class GameDao extends DAOImpl<GameRecord, ru.acuma.shuffler.tables.pojos.Game, Long> {

    /**
     * Create a new GameDao without any configuration
     */
    public GameDao() {
        super(Game.GAME, ru.acuma.shuffler.tables.pojos.Game.class);
    }

    /**
     * Create a new GameDao with an attached configuration
     */
    @Autowired
    public GameDao(Configuration configuration) {
        super(Game.GAME, ru.acuma.shuffler.tables.pojos.Game.class, configuration);
    }

    @Override
    public Long getId(ru.acuma.shuffler.tables.pojos.Game object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Game.GAME.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchById(Long... values) {
        return fetch(Game.GAME.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ru.acuma.shuffler.tables.pojos.Game fetchOneById(Long value) {
        return fetchOne(Game.GAME.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ru.acuma.shuffler.tables.pojos.Game> fetchOptionalById(Long value) {
        return fetchOptional(Game.GAME.ID, value);
    }

    /**
     * Fetch records that have <code>event_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchRangeOfEventId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Game.GAME.EVENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>event_id IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchByEventId(Long... values) {
        return fetch(Game.GAME.EVENT_ID, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(Game.GAME.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchByStatus(String... values) {
        return fetch(Game.GAME.STATUS, values);
    }

    /**
     * Fetch records that have <code>started_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchRangeOfStartedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Game.GAME.STARTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>started_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchByStartedAt(OffsetDateTime... values) {
        return fetch(Game.GAME.STARTED_AT, values);
    }

    /**
     * Fetch records that have <code>finished_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchRangeOfFinishedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Game.GAME.FINISHED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>finished_at IN (values)</code>
     */
    public List<ru.acuma.shuffler.tables.pojos.Game> fetchByFinishedAt(OffsetDateTime... values) {
        return fetch(Game.GAME.FINISHED_AT, values);
    }
}
